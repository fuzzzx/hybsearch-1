(page "index.html"
  (:require
    [hybsearch.rpc :as rpc]
    [tailrecursion.hoplon.reload :refer [reload-all]]
    [ui.scheme-set-list :as scheme-set-list]
    [ui.scheme-set-detail :as scheme-set-detail]
    [ui.sequences-upload :as sequences-upload]
    [ui.analysis-set-create :as set-create]
    [ui.clustal-scheme-create :as scheme-create]
   ))

;;(reload-all 1000)

(rpc/start!)


(defn show-modal [id] (-> (js/jQuery (str "#" id)) (.modal "show")))
(defn hide-modal [id] (-> (js/jQuery (str "#" id)) (.modal "hide")))


;; Todo: Guard against anything other than a GenBank file being uploaded

;; We should always pass the db to ui objects, in case we decide to extend them with custom queries later
;; might be cleaner code (though... maybe less efficeint) to just pass client state db to ui objects and perform
;; queries internally.


;; Todo: Open a state serving websocket with the server. Is RPC already a websocket?

(html
  (head)
  (body
    ;; Top-level container, prevents overflow and scrolling
    (div :style "position: absolute; overflow-y: hidden; overflow-x: hidden; top: 5px; bottom: 5px; left: 5px; right: 5px; padding: 1px;"
     (scheme-create/create-modal :id "clustal-scheme-create-modal")
     (set-create/create-modal :id "analysis-set-create-modal")
     (sequences-upload/upload-modal :id "sequences-upload-modal")

     (div :class "ui menu"
          (div :class "header item" (i :class "lab icon") "HybSearch")
          (div :class "item" (div :class "ui green button" :on-click #(show-modal "clustal-scheme-create-modal") (i :class "setting icon") "New Clustal Scheme"))
          (div :class "item" (div :class "ui green button" :on-click #(show-modal "analysis-set-create-modal") (i :class "cube icon") "New Analysis Set"))
          (div :class "item" (div :class "ui green button" :on-click #(show-modal "sequences-upload-modal") (i :class "cloud upload icon") "Upload Sequences"))
          (div :class "item" (div :class "ui primary button" (i :class "bug icon") "Explore Sequences")))
     (div :class "ui grid"
          (div :class "four wide column"
               (div :class "ui horizontal segment" :style "height: 90vh;"
                    (scheme-set-list/scheme-set-list :schemes rpc/clustal-schemes
                                                     :selected-scheme-id rpc/selected-clustal-scheme-id
                                                     :sets rpc/analysis-sets
                                                     :selected-set-id rpc/selected-analysis-set-id)))
          (div :class "twelve wide column"
               (div :class "ui horizontal segment" :style "height: 90vh;"
                    (let [full-detail (cell= (and rpc/selected-clustal-scheme rpc/selected-analysis-set))] ;; Needed this hack so all dom would be in the page before JS init, even though we don't want all dom visible right away
                      (div ;; wrapper for let return
                              (div :style (cell= (if full-detail "" "display: none;"))
                                   (scheme-set-detail/detail :clustal-scheme rpc/selected-clustal-scheme
                                                             :analysis-set rpc/selected-analysis-set
                                                             :jobs rpc/scheme-set-jobs))
                              (div :class "ui message" :style (cell= (if full-detail "display: none;" ""))
                                   (div :class "header" "Getting started:")
                                   (p "Please select a Clustal scheme and analysis set to see more detail. "
                                      "You can create these using the menu above."))))))))))


;; Initialize JS based elements
(-> (js/jQuery ".ui.modal"))
(-> (js/jQuery ".menu .item") .tab)
(-> (js/jQuery ".progress") .progress)
(-> (js/jQuery ".ui.dropdown") .dropdown)


;; Modifies a form so that it submits
;; over ajax when you call .submit() on it
;; jQuery .ajax kept sending GET requests instead of
;; POST, so we force it with .post() instead.
;; This, unfortunately, removes some of the generality of this function.
(defn setup-ajax-submit [form]
  (.submit form
           (fn [ev]
             (.post js/jQuery (.attr form "action") (.serialize form))
             (.preventDefault ev))))


;; clustal scheme create modal init
(setup-ajax-submit (js/jQuery "#clustal-scheme-create-form"))
(-> (js/jQuery "#clustal-scheme-create-modal") (.modal
                                       (clj->js
                                         {
                                          :closable false
                                          :onApprove (fn [] (.submit (js/jQuery "#clustal-scheme-create-form")))
                                          })))

;; analysis set create modal init
(setup-ajax-submit (js/jQuery "#analysis-set-create-form"))
(-> (js/jQuery "#analysis-set-create-modal") (.modal
                                       (clj->js
                                         {
                                          :closable false
                                          :onApprove (fn [] (.submit (js/jQuery "#analysis-set-create-form")))
                                          })))

;; sequences Upload Modal Init
(-> (js/jQuery "#sequences-upload-modal") (.modal
                                       (clj->js
                                         {
                                          :closable false
                                          :onApprove (fn [] (.submit (js/jQuery "#sequences-upload-form")))
                                          })))

